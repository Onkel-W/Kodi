//
//    Copyright (C) 2018 Team Kodi
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included
//    in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

include "action.fbs";
include "multicodec.fbs";

namespace KODI.RETRO;

// Savestate schema
// Version 1

file_identifier "SAV_";

table State {
  /// @brief The timestamp, in frames.Monotonically increases each frame.
  timestamp:uint64;

  /// @brief The multihash of the action taken
  action_digest:[uint8];

  /// @brief The action
  action:[Action];
}

enum SaveType : uint8 {
  Unknown,
  Auto,
  Manual
}

table Savestate {
  // Schema version
  version:uint8;

  // Savestate properties
  type:SaveType;
  slot:uint8;
  label:string;
  //creator:string;
  created:string; // RFC 1123 date time

  // Game properties
  game_file_name:string;
  //std::map<std::string, std::string> m_gameHashes; // TODO

  // Environment properties
  timestamp_frames:uint64;
  timestamp_wall_clock_ns:uint64;

  // Emulator properties
  emulator_addon_id:string;
  emulator_version:string; // Semantic version
  //game_client_hash:string; // TODO

  // Video stream properties
  //pixel_format:PixelFormat;
  //max_width:uint16;
  //max_height:uint16;
  //pixel_aspect_ratio:float = 1.0;

  // Video frame properties
  //video_data:[uint8];
  //video_width:uint16;
  //video_height:uint16;
  //rotation:VideoRotation;

  // Audio stream properties
  //audio_format:PCMFormat;
  //sample_rate:double;
  //channel_map:AudioChannelMap;

  // Audio frame properties
  //audio_data:[uint8];

  // Memory properties
  memory_data:[uint8];

  // Input properties
  //controller_tree:ControllerTree;
  //player_actions:PlayerActions;
}

root_type Savestate;
